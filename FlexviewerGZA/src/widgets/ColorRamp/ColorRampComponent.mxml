<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010-2011 ESRI
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      xmlns:esri="http://www.esri.com/2008/ags"
                      creationComplete="init()" backgroundAlpha="0">
    <!-- this component is used by the OverviewMapWidget -->
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Map;
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.ConfigData;
            import com.esri.viewer.ViewerContainer;
            
            import mx.collections.ArrayCollection;
            import mx.core.FlexGlobals;
            import mx.events.EffectEvent;

            private var _openToolTip:String;
            private var _closeToolTip:String;

			private var _imageSource:String;
			
			[Bindable]
			private var _value1:Number=0;//max
			[Bindable]
			private var _value2:Number=0;
			[Bindable]
			private var _value3:Number=0;
			[Bindable]
			private var _value4:Number=0;
			[Bindable]
			private var _value5:Number=0;//min
			
            private function init():void
            {
                
                toggleIcon.addEventListener(MouseEvent.CLICK, toggleIcon_clickHandler);
//                viewBox.setStyle("contentBackgroundColor", getStyle('contentBackgroundColor'));
            }
			
            private function toggleIcon_clickHandler(event:MouseEvent):void
            {
                currentState = (currentState == "collapsed") ? "expanded" : "collapsed";
            }
			
			public function ShowExpanded():void
			{
				currentState = "expanded"
			}

			public function ShowCollapsed():void
			{
				currentState = "collapsed"
			}
			
			public function set OpenToolTip(value:String):void
			{
				_openToolTip = value;
			}
			
			[Bindable]
			public function get OpenToolTip():String
			{
				return _openToolTip;
			}
			
			public function set CloseToolTip(value:String):void
			{
				_closeToolTip = value;
			}
			
			[Bindable]
			public function get CloseToolTip():String
			{
				return _closeToolTip;
			}
			
			public function set ImageSource(value:String):void
			{
				_imageSource = value;
			}
			
			[Bindable]
			public function get ImageSource():String
			{
				return _imageSource;
			}
			
			public function set MaxValue(value:Number):void
			{
				_value1 = Number(value.toFixed(3));
				SetOtherValues();
			}
			
			[Bindable]
			public function get MaxValue():Number
			{
				return _value1;
			}
			
			public function set MinValue(value:Number):void
			{
				if(value<0.01&&value>0)
				{
					value = 0;
				}
				_value5 = Number(value.toFixed(3));
				SetOtherValues();
			}
			
			[Bindable]
			public function get MinValue():Number
			{
				return _value5;
			}
			
			private function SetOtherValues():void
			{
				if(_value1 != 0||_value5 != 0)
				{
					var interval:Number = (_value1-_value5)/4;
					_value4 = interval + _value5;
					_value3 = interval + _value4;
					_value2 = interval + _value3;
				}
			}
			
			
            private function sequence_effectStartHandler(event:EffectEvent):void
            {
                if (currentState == "expanded")
                {
                }
            }

            private function sequence_effectEndHandler(event:EffectEvent):void
            {
                if (currentState == "collapsed") // turn layer(s) off if component is collapsed
                {
                }
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="collapsed"/>
        <s:State name="expanded"/>
    </s:states>

    <s:transitions>
        <s:Transition fromState="*" toState="*">
            <s:Sequence effectEnd="sequence_effectEndHandler(event)" effectStart="sequence_effectStartHandler(event)">
                <s:Resize duration="400" target="{viewBox}"/>
                <s:Rotate angleBy="180"
                          autoCenterTransform="true"
                          duration="200"
                          target="{toggleIcon}"/>
            </s:Sequence>
        </s:Transition>
    </s:transitions>

    <s:BorderContainer id="viewBox"
                       width="66" width.collapsed="{toggleIcon.width}" 
					   height="310" height.collapsed="{toggleIcon.height}"
                       color="{getStyle('contentBackgroundColor')}" 
					   backgroundColor="{getStyle('contentBackgroundColor')}">
		<s:Group id="colorRampGroup" width="100%" left="30" top="5">
			<s:Label text="图例" color="{getStyle('color')}" fontWeight="bold"/>
		</s:Group>
		<mx:Image id="colorRampImage"
				  width="64" height="290"
				  left="0" top="20"
				  smoothBitmapContent="true"
				  source="{ImageSource}"
				  useHandCursor="true"
				  />
        <mx:Image id="toggleIcon"
                  width="20" height="20"
                  left="0" top="0"
                  buttonMode="true"
                  smoothBitmapContent="true"
                  source="assets/images/i_cr_expand_white.png"
                  toolTip.collapsed="{OpenToolTip}"
                  toolTip.expanded="{CloseToolTip}"
                  useHandCursor="true"
				  />
		<s:VGroup left="2" top="58" width="30" height="244" horizontalAlign="center">
			<s:Label text="{_value1.toPrecision(3)}" color="{getStyle('color')}" fontWeight="bold" />
			<mx:Spacer height="100%" />
			<s:Label text="{_value2.toPrecision(3)}" color="{getStyle('color')}" fontWeight="bold" />
			<mx:Spacer height="100%" />
			<s:Label text="{_value3.toPrecision(3)}" color="{getStyle('color')}" fontWeight="bold" />
			<mx:Spacer height="100%" />
			<s:Label text="{_value4.toPrecision(3)}" color="{getStyle('color')}" fontWeight="bold" />
			<mx:Spacer height="100%" />
			<s:Label text="{_value5.toPrecision(3)}" color="{getStyle('color')}" fontWeight="bold" />
		</s:VGroup>
    </s:BorderContainer>
    <s:Rect left="-1" right="-1" top="-1" bottom="-1">
        <s:stroke>
            <s:SolidColorStroke color="{getStyle('contentBackgroundColor')}" weight="1"/>
        </s:stroke>
    </s:Rect>
    <s:Rect left="-5" right="-5" top="-5" bottom="-5">
        <s:stroke>
            <s:SolidColorStroke color="{getStyle('color')}" weight="2"/>
        </s:stroke>
    </s:Rect>
</s:SkinnableContainer>
