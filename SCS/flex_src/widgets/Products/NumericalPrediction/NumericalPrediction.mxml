<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Declarations>
		<s:SolidColorStroke id="stroke" color="0x7b7b7b" weight="1" />
		<s:Fade id="fadeAdd"  alphaFrom="0" alphaTo="1" duration="500" repeatCount="1" />
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="GoBacktoMain",type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.events.ZoomEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.symbols.PictureFillSymbol;
			import com.esri.viewer.AppEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.events.IndexChangeEvent;
			
			import widgets.Products.ProductsWidget;
			import widgets.Products.ProductsWidgetXml;
			[Embed(source="assets/images/Error.png")]
			private var errorLogo:Class;
			private var windDateArray:Array = ["暂无数据","暂无数据"];
			[Bindable]
			private var windDate:String = "暂无数据";
			[Bindable]
			private var waveDate:String = "暂无数据";
			[Bindable]
			public var map:Map;
			private var layerMaxMinDict:Dictionary = new Dictionary();
			
			private var loadingTitleWindow:LoadingTitleWindow;
			private var centerPoint:MapPoint;
			
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				AppEvent.addListener(AppEvent.MAPINITIALIZED,MapInitializedListener);
			}
			//从main状态切换过来执行的函数
			private var once:Boolean=true;
			public function changeFunction():void
			{
				accordion_changeHandler(null);
				//只执行一次
				if(once)
				{
					once=false;
					//读取时间文件，获取图层的时间和填色图的最大最小值
					getLayerDate();
				}
			}
			
			protected function MapInitializedListener(event:AppEvent):void
			{
				this.map = event.data as Map;
				map.addEventListener(ZoomEvent.ZOOM_START,ZOOM_STARTHandler);
			}
			protected function goBack_clickHandler(event:MouseEvent):void
			{
				removeExistLayers();
				
				var goBacktoMain:Event=new Event("GoBacktoMain", true);
				this.dispatchEvent(goBacktoMain);
			}
			
			//读取时间文件，获取图层的时间和填色图的最大最小值
			protected function getLayerDate():void
			{
				var httpService:HTTPService = new HTTPService();
				httpService.resultFormat = HTTPService.RESULT_FORMAT_E4X;
				httpService.addEventListener(ResultEvent.RESULT, getLayerDate_resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, getLayerDate_faultHandler);
				httpService.url = "http://" + ProductsWidgetXml.serverIP + "/img/wave.xml?"+Math.random();
				httpService.send();
				
				httpService = new HTTPService();
				httpService.resultFormat = HTTPService.RESULT_FORMAT_E4X;
				httpService.addEventListener(ResultEvent.RESULT, getLayerDate_resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, getLayerDate_faultHandler);
				httpService.url = "http://" + ProductsWidgetXml.serverIP + "/img/wind08.xml?"+Math.random();
				httpService.send();
				
				httpService = new HTTPService();
				httpService.resultFormat = HTTPService.RESULT_FORMAT_E4X;
				httpService.addEventListener(ResultEvent.RESULT, getLayerDate_resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, getLayerDate_faultHandler);
				httpService.url = "http://" + ProductsWidgetXml.serverIP + "/img/wind20.xml?"+Math.random();
				httpService.send();
			}
			
			
			/*  
			查询图层，获取拼接数值预报图层的name属性
			prodType:产品类型
			prod:产品
			*/
			protected function getNumPredLayer(event:MouseEvent,prodType:String,prod:String):void
			{
				if(windDate == "暂无数据" && prodType == "Wind" 
					||waveDate == "暂无数据" && prodType == "Wave" )
				{
					Alert.show("数据未入库，请等候","暂无数据", 4, null, null,errorLogo);
					return;
				}
				removeExistLayers();
				
				var layerName:String = "";
				var date:String = "";
				if(prodType == "Wind")
				{
					//气象数据日期后面还有小时
					date = windDate;
				}
				else if(prodType == "Wave")
				{
					date = waveDate;
				}
				//Wind_Q2_0_20130107
				layerName = prodType + "_" + prod + "_" + 
					hSlider.value.toString() + "_" + date;
				getLayer(layerName);
			}
			//获取要加载的图层，主要是一些需要做特殊处理的图层
			protected function getLayer(layerName:String):void
			{
				loadLayer(layerName);
				if(layerName.indexOf("_W10_")!=-1)
				{
					loadLayer(layerName.replace("_W10_","_W10Contour_"));
				}
				else if(layerName.indexOf("_HS_")!=-1)
				{
					loadLayer(layerName.replace("_HS_","_DIR_"));
				}
			}
			//加载图层
			protected function loadLayer(layerName:String):void
			{
				//用Loader可以监听图层加载完毕事件，以设置图层加载的进度显示
				var pictureLoader:Loader = new Loader();
				pictureLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(event:Event):void{Alert.show((event.currentTarget.url as String)+"图层加载失败","暂无数据", 4, null, null,errorLogo);});
				pictureLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (event:Event):void{
					//添加polygonlayer，设置PictureFillSymbol
					var graphicsLayer:GraphicsLayer = new GraphicsLayer();
					graphicsLayer.id="NumericalLayer_"+layerName;
					graphicsLayer.name="Numerical Layer_"+layerName;
					//设置图层信息,产品类型，产品层数类型标志
					graphicsLayer.document = layerInfo;
					graphicsLayer.alpha = layerName.indexOf("Contour")==-1?1:0.5;
					var graphic:Graphic = new Graphic();
					var polygon:Polygon  = new Polygon();
					polygon.spatialReference = map.spatialReference;
					var ring:Array = new Array();
					//钓鱼岛图层的坐标范围
					if((event.currentTarget.url as String).indexOf("DYD") != -1)
					{
						ring.push(new MapPoint(13135699.913606282,3375646.0349193094));
						ring.push(new MapPoint(13135699.913606282,2753408.109364979));
						ring.push(new MapPoint(14471533.803125564,2753408.109364979));
						ring.push(new MapPoint(14471533.803125564,3375646.0349193094));
						ring.push(new MapPoint(13135699.913606282,3375646.0349193094));
					}
						//海浪图层的坐标范围
					else if((event.currentTarget.url as String).indexOf("Wave") != -1)
					{
						ring.push(new MapPoint(11688546.533293726,5621521.486192066));
						ring.push(new MapPoint(11688546.533293726,557305.2572745768));
						ring.push(new MapPoint(14471533.803125564,557305.2572745768));
						ring.push(new MapPoint(14471533.803125564,5621521.486192066));
						ring.push(new MapPoint(11688546.533293726,5621521.486192066));
					}
						//气象图层的坐标范围
					else if((event.currentTarget.url as String).indexOf("Wind") != -1)
					{
						ring.push(new MapPoint(11131949,6446276));
						ring.push(new MapPoint(11131949,-6706));
						ring.push(new MapPoint(16697924,-6706));
						ring.push(new MapPoint(16697924,6446276));
						ring.push(new MapPoint(11131949,6446276));
					}
					else
					{
						return;
					}
					polygon.addRing(ring);
					graphic.geometry = polygon;
					var fillSymbol:PictureFillSymbol = new PictureFillSymbol(event.currentTarget.url,251,251,1,1,0,0,0.001,null);//"Embed(source='assets/images/about.png')"
					graphic.symbol = fillSymbol;
					graphicsLayer.add(graphic);
					graphicsLayer.addEventListener(LayerEvent.UPDATE_END,afterLayerLoaded);//添加图层加载完毕的事件监听
					map.addLayer(graphicsLayer);
					reorderMapLayer();//重新组织图层的顺序
					ZOOM_STARTHandler(null);//获取该地图缩放级别的图层
				});
				//"http://localhost/img/20121217/Wind_Q2_0_2012112520.png"
				//"http://localhost/img/20121217/Wind_PSFC_0_2012112508_L4.png"
				var layerInfo:ArrayCollection = getLayerInfo(layerName);
				var url:String = "http://" 
					+ ProductsWidgetXml.serverIP + "/img/"
					+layerInfo.getItemAt(2)//date
					+"/"+layerName+layerInfo.getItemAt(3)
					+".png";
				pictureLoader.load(new URLRequest(url));
				setLoadingTitleWindow();
			}
			//获取图层的信息
			//Wind_Q2_0_2013010708
			//Wind_QVAPOR_0_0_2013010708
			//Wind_SSWContour_0_0_2013010708
			protected function getLayerInfo(layerName:String):ArrayCollection
			{
				var layerInfo:ArrayCollection = new ArrayCollection();
				var array:Array = layerName.split('_');
				layerInfo.addItem(array[1]);//0、Q2，色标拉伸中用到
				layerInfo.addItem(array[0]);//1、Wind
				layerInfo.addItem(array[array.length-1]);//2、2013010708
				layerInfo.addItem(productLevelType(array[1]));//3、""或者"_L5"//_L5为多层数据，""为单层数据，"_D6"为钓鱼岛数据，在放大缩小时用到
				var maxmin:Object = layerMaxMinDict[layerName];
				layerInfo.addItem(maxmin==null?"":maxmin.Max);//4、最大值，色标拉伸中用到
				layerInfo.addItem(maxmin==null?"":maxmin.Min);//5、最小值，色标拉伸中用到
				return layerInfo;
			}
			
			//获取图层类型，""或者"_L45"//_L45为多层数据，""为单层数据
			protected function productLevelType(product:String):String
			{
				switch(product)
				{
					case "Q2":
					case "T2":
					case "RAINC":
					case "RAINNC":
					case "SST":
					case "QVAPOR":
					case "QCLOUD":
					case "RH":
					case "TT":
					case "GHT":
					case "HS":
					case "HSContour":
					case "SSWContour":
					case "W10Contour":
						return "";
						break;
					case "HSDYD":
					case "W10DYD":
						return "_D6";
						break;
					default:
						return "_L4";
				}
			}
			//重新组织图层的顺序
			protected function reorderMapLayer():void
			{
				for each(var layer:Layer in map.layers)
				{
					//海浪箭头
					if((layer is GraphicsLayer && layer.id.indexOf("_DIR_")!=-1))
					{
						map.reorderLayer(layer.id,(map.layers as ArrayCollection).length-1);
					}
				}
				for each(var layer:Layer in map.layers)
				{
					//执法海域图层放在最上层
					if((layer is GraphicsLayer && layer.id=="lawEnforceLayer"))
					{
						map.reorderLayer(layer.id,(map.layers as ArrayCollection).length-1);
					}
				}
			}
			
			
			//显示图层加载中的titlewindow
			private function setLoadingTitleWindow():void
			{
				if(loadingTitleWindow == null)
				{
					loadingTitleWindow = LoadingTitleWindow(PopUpManager.createPopUp(this,LoadingTitleWindow));
					loadingTitleWindow.x = 0;
					loadingTitleWindow.y = 0;
					loadingTitleWindow.width = stage.stageWidth;
					loadingTitleWindow.height = stage.stageHeight;
				}
				loadingTitleWindow.visible = true;
			}
			
			//图层加载完毕的工作
			private function afterLayerLoaded(evt:LayerEvent):void
			{
				if(evt.layer != null )
				{
					//隐藏关闭动画
					loadingTitleWindow.visible = false;
					
					var layer:GraphicsLayer = evt.layer as GraphicsLayer
					
					fadeAdd.alphaTo = layer.name.indexOf("Contour")==-1?1:0.5
					fadeAdd.target = layer;
					fadeAdd.end();
					fadeAdd.play();// 显示动画
					
					//删除事件监听
					if(layer.hasEventListener(LayerEvent.UPDATE_END))
					{
						layer.removeEventListener(LayerEvent.UPDATE_END,afterLayerLoaded);
					}
					//缩放到图层
					map.extent = (((layer.graphicProvider as ArrayCollection).getItemAt(0) as Graphic).geometry as Polygon).extent;	
				}
			}
			
			//移除所有数值预报图层，若一边找图层一边删除，会出现删不干净的bug，所以先将所有的待删除的图层放在列表中，一起删除
			public function removeExistLayers():void
			{
				var layerList:Array = new Array();
				for each(var layer:Layer in map.layers)
				{
					if((layer is GraphicsLayer && layer.id.indexOf("Numerical")!=-1))
					{
						layerList.push(layer);
					}
				}
				for each(var layer:Layer in layerList)
				{
					map.removeLayer(layer);
				}
			}
			protected function getLayerDate_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				if((event.currentTarget.url as String).indexOf("wave") != -1)
				{
					//读取海浪时间
					var date:String = result.@date||"暂无数据";
					if(date.length == 8)
					{
						waveDate = date;
					}
				}
					//气象数据08时
				else if((event.currentTarget.url as String).indexOf("wind08") != -1)
				{
					//读取气象时间
					var date:String = result.@date||"暂无数据";
					if(date.length == 10)
					{
						//windDateArray[0] = date.substr(4,2) + "月" + date.substr(6,2) + "日";
						windDateArray[0] = date;
					}
					setNearestDate();
				}
					//气象数据20时
				else if((event.currentTarget.url as String).indexOf("wind20") != -1)
				{
					//读取气象时间
					var date:String = result.@date||"暂无数据";
					if(date.length == 10)
					{
						windDateArray[1] = date;
					}
					setNearestDate();
				}
				//读取最大最小值
				for each(var node:XML in result.children())
				{
					layerMaxMinDict[node.name()]={"Max":node.@Max,"Min":node.@Min};
				}
			}
			
			protected function setNearestDate():void
			{
				if(windDateArray[0] == windDateArray[1])
				{
					windDate = windDateArray[1];
					ddl_prodHour.selectedIndex = 1;
				}
				else
				{
					windDate = windDateArray[0];
					ddl_prodHour.selectedIndex = 0;
				}
			}
			
			protected function getLayerDate_faultHandler(event:FaultEvent):void
			{
				//lb_prodDateWind.text = "暂无数据";
				//lb_prodDateWave.text = "暂无数据";
			}
			
			// 地图zoom事件，动态改变图片的大小和偏移
			private function ZOOM_STARTHandler(e:ZoomEvent):void
			{
				for each(var graphicsLayer:Layer in map.layers)
				{
					//根据缩放级别设置图层的图片源
					if(graphicsLayer is GraphicsLayer && graphicsLayer.id.indexOf("Numerical")!=-1)
					{
						if(graphicsLayer==null) return;
						
						var symbol:PictureFillSymbol=(((graphicsLayer as GraphicsLayer).graphicProvider as ArrayCollection).getItemAt(0) as Graphic).symbol as PictureFillSymbol;
						if((graphicsLayer.document as ArrayCollection).getItemAt(3) == "_L4")
						{
							if(map.level==0)
							{
								symbol.source = (symbol.source as String).replace("_L4","_L3").replace("_L5","_L3").replace("_L6","_L3");
							}
							else if(map.level==1)
							{
								symbol.source = (symbol.source as String).replace("_L3","_L4").replace("_L5","_L4").replace("_L6","_L4");
							}
							else if(map.level==2)
							{
								symbol.source = (symbol.source as String).replace("_L3","_L5").replace("_L4","_L5").replace("_L6","_L5");
							}
							else
							{
								symbol.source = (symbol.source as String).replace("_L3","_L6").replace("_L4","_L6").replace("_L5","_L6");
							}
						}
						else if((graphicsLayer.document as ArrayCollection).getItemAt(3) == "_D6")
						{
							if(map.level<3)
							{
								symbol.source = (symbol.source as String).replace("_D6","_D0").replace("_D7","_D0").replace("_D8","_D0");
							}
							if(map.level==3)
							{
								symbol.source = (symbol.source as String).replace("_D0","_D6").replace("_D7","_D6").replace("_D8","_D6");
							}
							else if(map.level==4)
							{
								symbol.source = (symbol.source as String).replace("_D0","_D7").replace("_D6","_D7").replace("_D8","_D7");
							}
							else if(map.level==5)
							{
								symbol.source = (symbol.source as String).replace("_D0","_D8").replace("_D7","_D8").replace("_D6","_D8");
							}
						}
						else
						{
							//symbol.source = symbol.source;
						}
						var extent:Extent = ((((graphicsLayer as GraphicsLayer).graphicProvider as ArrayCollection).getItemAt(0) as Graphic).geometry as Polygon).extent;
						var resolution:Number = map.lods[map.level].resolution;
						var width:Number = extent.width/resolution;
						var height:Number = extent.height/resolution;
						symbol.width = width;
						symbol.height = height;
						//初始状态为左下角
						symbol.xoffset = Math.floor(width/2);//x偏移
						symbol.yoffset = Math.ceil(height/2);//y偏移
						
						graphicsLayer.refresh();
					}
				}
			}
			
			
			//根据08时和20时更改时间
			protected function ddl_prodHour_changeHandler(event:IndexChangeEvent):void
			{
				var index:Number = event.newIndex;
				windDate = windDateArray[index];
				lb_prodDateWind.text = (windDate=='暂无数据'?windDate:(windDate.substr(4,2)+'月'+windDate.substr(6,2)+'日'));
			}
			
			protected function accordion_changeHandler(event:IndexChangedEvent):void
			{
				removeExistLayers();
				//点击不同海域，将底图缩放到该海域
				switch(accordion.selectedIndex)
				{
					case 0://中国近海
						map.level = 1;
						map.centerAt(new MapPoint(13914936.5,3219785));
						break;
					case 1://钓鱼岛
						map.level = 4;
						map.centerAt(new MapPoint(13803616.858365923,3064527.072142144));
						break;
				}
			}
			
		]]>
	</fx:Script>
	<s:BorderContainer top="5" width="230" left="10" height="35"
					   styleName="BorderContainer" borderWeight="2" >
		<s:Label x="10" y="10"  styleName="LabelTitle" text="数值产品" />
		<!--<s:Image x="145" y="4" source="assets/images/arrow-previous.png" />-->
		<!--<mx:LinkButton id="reset" label="移除" styleName="LabelTitle" 
					   x="125" y="3" click="removeExistLayers()" />-->
		<mx:LinkButton id="goBack" label="返回" styleName="LabelTitle" 
					   y="3" right="10" click="goBack_clickHandler(event)" />
	</s:BorderContainer>
	<s:BorderContainer top="45" width="230" left="10" height="100"
					   styleName="BorderContainer" >
		<s:Label  x="10" y="10" text="气象起报时间:" toolTip="橙色为气象产品" color="0xFABC0A" />
		<s:Label id="lb_prodDateWind" text="{windDate=='暂无数据'?windDate:(windDate.substr(4,2)+'月'+windDate.substr(6,2)+'日')}" x="100" y="10" toolTip="橙色为气象产品" color="0xFABC0A"  />
		<s:DropDownList id="ddl_prodHour" x="159" y="5" width="68"  toolTip="橙色为气象产品" color="0xFABC0A" 
						dataProvider="{new ArrayCollection(['08时','20时'])}"
						selectedIndex="0" change="ddl_prodHour_changeHandler(event)" />
		<s:Label  x="10" y="30" text="海浪起报时间:" toolTip="黄色为海浪产品" color="0xffff00" />
		<s:Label id="lb_prodDateWave" text="{waveDate=='暂无数据'?waveDate:(waveDate.substr(4,2)+'月'+waveDate.substr(6,2)+'日')}" x="100" y="30" toolTip="黄色为海浪产品" color="0xffff00" />
		<s:Label id="lb_prodHourWave" text="20时" x="165" y="30" toolTip="黄色为海浪产品" color="0xffff00" />
		<s:Label id="lb_prodTime" x="10" y="50" text="预报时次:" />
		<mx:HSlider x="10" y="81" width="207"
					id="hSlider" minimum="0" maximum="120" value="0"  
					snapInterval="12" tickInterval="12"
					dataTipPlacement="top"   
					tickColor="white"  
					tickOffset="2"
					labels="['0','24','48','72','96','120']"   
					labelOffset="2"
					allowTrackClick="true"   />
		<!--<s:DropDownList id="ddl_prodTime" x="75" y="30" width="65"/>-->
	</s:BorderContainer>
	<mx:Accordion id="accordion" selectedIndex="0"
				  top="150" width="230" left="10" height="250"
				  openDuration="400" change="accordion_changeHandler(event)" >
		<s:NavigatorContent label="中国近海查询" toolTip="点击显示中国近海产品" >
			<s:VGroup height="100%" width="100%">
				<s:Spacer height="1" />
				<mx:LinkButton label="10m风场" toolTip="点击加载中国近海10m风场" color="0xFABC0A" click="getNumPredLayer(event,'Wind','W10')"/>
				<mx:LinkButton label="表面气压(百帕)" toolTip="点击加载中国近海表面气压" color="0xFABC0A" click="getNumPredLayer(event,'Wind','PSFC')"/>
				<mx:LinkButton label="海浪" toolTip="点击加载中国近海海浪" color="0xffff00" click="getNumPredLayer(event,'Wave','HS')"/>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent label="钓鱼岛海域查询"  toolTip="点击显示钓鱼岛海域产品" >
			<s:VGroup height="100%" width="100%">
				<s:Spacer height="1" />
				<mx:LinkButton label="10m风场(级)" toolTip="点击加载钓鱼岛10m风场" color="0xFABC0A" click="getNumPredLayer(event,'Wind','W10DYD')"/>
				<mx:LinkButton label="波高(米)" toolTip="点击加载钓鱼岛波高" color="0xffff00" click="getNumPredLayer(event,'Wave','HSDYD')"/>
			</s:VGroup>
		</s:NavigatorContent>
	</mx:Accordion>
</s:Group>
