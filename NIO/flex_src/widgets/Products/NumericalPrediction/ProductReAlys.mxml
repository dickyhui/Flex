<?xml version="1.0" encoding="utf-8"?>
<Products:ProductBase
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:Products="widgets.Products.*"
	creationComplete="creationCompleteHandler(event)"
	itemTitle="再分析">
	<fx:Declarations>
		<s:SolidColorStroke id="stroke" color="0x7b7b7b" weight="1" />
		<s:Fade id="fadeAdd"  alphaFrom="0" alphaTo="1" duration="500" repeatCount="1" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.events.ZoomEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.symbols.PictureFillSymbol;
			import com.esri.viewer.AppEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.effects.Zoom;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.events.IndexChangeEvent;
			
			import widgets.Products.ProductsWidgetXml;
			
			[Bindable]
			public var map:Map;
			private var productDateArray:Array = ["暂无数据","暂无数据"];
			//DateField选中的时间
			private var productDate:String;
			private var layerMaxMinDict:Dictionary = new Dictionary();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.map = ProductsWidgetXml.map;
			}
			public override function closeProductFunction():void
			{
				removeExistLayers();
			}
			public override function openProductFunctionEveryTime():void
			{
				accordion_changeHandler(null);
			}
			public override function openProductFunctionOnce():void
			{
				getLayerDate();
			}
			
			//读取时间文件，获取图层的时间和填色图的最大最小值
			protected function getLayerDate():void
			{
				//读取选定日期的TD潮流的xml
				var monthString:String = (dateField.selectedDate.month+1).toString();
				monthString = monthString.length==1?"0"+monthString:monthString;
				var dayString:String = dateField.selectedDate.date.toString();
				dayString = dayString.length==1?"0"+dayString:dayString;
				productDate = dateField.selectedDate.fullYear.toString()
					+ monthString
					+ dayString;
				var xmlName:String = "reAlys_" + productDate;
				var httpService:HTTPService = new HTTPService();
				httpService = new HTTPService();
				httpService.resultFormat = HTTPService.RESULT_FORMAT_E4X;
				httpService.addEventListener(ResultEvent.RESULT, getLayerDate_resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, getLayerDate_faultHandler);
				httpService.url = "http://" + ProductsWidgetXml.serverIP + "/img_nio/ReAlys/reAlys_xml/"+xmlName+".xml?"+Math.random();
				httpService.send();
				
			}
			protected function getLayerDate_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				layerMaxMinDict = new Dictionary();
				//读取最大最小值
				for each(var node:XML in result.children())
				{
					layerMaxMinDict[node.name()]={"Max":node.@Max,"Min":node.@Min};
				}
			}
			
			
			protected function getLayerDate_faultHandler(event:FaultEvent):void
			{
			}
			protected function getNumPredLayer(prod:String):void
			{
				removeExistLayers();
				
				var layerName:String = "";
				var date:String = "";
				
				//气象数据日期后面还有小时
				date = productDate;
				var level:String = ddl_prodLevel.selectedIndex.toString();
				//二维产品
				if(this.currentState == "state2D")
				{
					level = "0";
				}
				//Wind-QVAPOR-0-0-2013010708
				//Wave-HS-0-0-20130107
				layerName = "ReAlys-" + prod + "-" + 
					"0" + "-" + level + "-" +date;
				
				getLayer(layerName);
			}
			//获取要加载的图层，主要是一些需要做特殊处理的图层
			protected function getLayer(layerName:String):void
			{
				loadLayer(layerName);
			}
			//加载图层
			protected function loadLayer(layerName:String):void
			{
				//用Loader可以监听图层加载完毕事件，以设置图层加载的进度显示
				var pictureLoader:Loader = new Loader();
				pictureLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(event:Event):void{Alert.show("数据未入库","提示", 4, null, null,ProductBase.errorLogo);});
				pictureLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (event:Event):void{
					//添加polygonlayer，设置PictureFillSymbol
					var graphicsLayer:GraphicsLayer = new GraphicsLayer();
					graphicsLayer.id="NumericalLayer_"+layerName;
					graphicsLayer.name="Numerical Layer_"+layerName;
					//设置图层信息,产品类型，产品层数类型标志
					graphicsLayer.document = layerInfo;
					//graphicsLayer.alpha = layerName.indexOf("Contour")==-1?1:0.5;
					var graphic:Graphic = new Graphic();
					var polygon:Polygon  = new Polygon();
					polygon.spatialReference = map.spatialReference;
					var ring:Array = new Array();
					//坐标范围
					ring.push(new MapPoint(3395244,3503550));
					ring.push(new MapPoint(3395244,-1689200));
					ring.push(new MapPoint(13580978,-1689200));
					ring.push(new MapPoint(13580978,3503550));
					ring.push(new MapPoint(3395244,3503550));
					
					polygon.addRing(ring);
					graphic.geometry = polygon;
					var fillSymbol:PictureFillSymbol = new PictureFillSymbol(event.currentTarget.url,251,251,1,1,0,0,0.001,null);//"Embed(source='assets/images/about.png')"
					graphic.symbol = fillSymbol;
					graphicsLayer.add(graphic);
					graphicsLayer.addEventListener(LayerEvent.UPDATE_END,afterLayerLoaded);//添加图层加载完毕的事件监听
					map.addLayer(graphicsLayer);
					reorderMapLayer();//重新组织图层的顺序
					var zoomEvent:ZoomEvent = new ZoomEvent(ZoomEvent.ZOOM_START);
					map.dispatchEvent(zoomEvent);//获取该地图缩放级别的图层
				});
				//"http://localhost/img/20121217/Wind-Q2-0-2012112520.png"
				//"http://localhost/img/20121217/Wind-PSFC-0-2012112508-L4.png"
				var layerInfo:ArrayCollection = getLayerInfo(layerName);
				var url:String = "http://" 
					+ ProductsWidgetXml.serverIP + "/img_nio/ReAlys/"
					+layerInfo.getItemAt(2)//date
					+"/"+layerName+layerInfo.getItemAt(3)
					+".png";
				pictureLoader.load(new URLRequest(url));
				AppEvent.dispatch(AppEvent.LOADING,true);
			}
			//获取图层的信息
			//Wind-Q2-0-2013010708
			//Wind-QVAPOR-0-0-2013010708
			//Wind-SSWContour-0-0-2013010708
			protected function getLayerInfo(layerName:String):ArrayCollection
			{
				var layerInfo:ArrayCollection = new ArrayCollection();
				var array:Array = layerName.split('-');
				layerInfo.addItem(array[1]);//0、Q2，色标拉伸中用到
				layerInfo.addItem(array[0]);//1、Wind
				layerInfo.addItem(array[array.length-1]);//2、2013010708
				layerInfo.addItem(productLevelType(array[1]));//3、""或者"-L4"//-L4为多层数据，""为单层数据，在放大缩小时用到
				var maxmin:Object = layerMaxMinDict[layerName];
				layerInfo.addItem(maxmin==null?"":maxmin.Max);//4、最大值，色标拉伸中用到
				layerInfo.addItem(maxmin==null?"":maxmin.Min);//5、最小值，色标拉伸中用到
				return layerInfo;
			}
			
			//获取图层类型，""或者"-L4"//-L4为多层数据，""为单层数据
			protected function productLevelType(product:String):String
			{
				switch(product)
				{
					case "salt":
					case "temp":
					case "el":
					case "soundspeed":
					case "density":
						return "";
						break;
					case "uv":
						return "-L4";
						break;
					default:
						return "";
				}
			}
			//图层加载完毕的工作
			private function afterLayerLoaded(evt:LayerEvent):void
			{
				if(evt.layer != null )
				{
					//隐藏关闭动画
					AppEvent.dispatch(AppEvent.LOADING,false);
					
					var layer:GraphicsLayer = evt.layer as GraphicsLayer
					
					//fadeAdd.alphaTo = 0.5;
					fadeAdd.target = layer;
					fadeAdd.end();
					fadeAdd.play();// 显示动画
					
					//删除事件监听
					if(layer.hasEventListener(LayerEvent.UPDATE_END))
					{
						layer.removeEventListener(LayerEvent.UPDATE_END,afterLayerLoaded);
					}
					//缩放到图层
					map.extent = (((layer.graphicProvider as ArrayCollection).getItemAt(0) as Graphic).geometry as Polygon).extent;	
				}
			}
			
			//移除所有数值预报图层，若一边找图层一边删除，会出现删不干净的bug，所以先将所有的待删除的图层放在列表中，一起删除
			public function removeExistLayers():void
			{
				var layerList:Array = new Array();
				for each(var layer:Layer in map.layers)
				{
					if((layer is GraphicsLayer && layer.id.indexOf("Numerical")!=-1))
					{
						layerList.push(layer);
					}
				}
				for each(var layer:Layer in layerList)
				{
					map.removeLayer(layer);
				}
			}
			
			//重新组织图层的顺序
			protected function reorderMapLayer():void
			{
				
			}
			
			protected function accordion_changeHandler(event:IndexChangedEvent):void
			{
				switch(accordion.selectedIndex)
				{
					case 0:
						//层数不可用
						this.currentState = "state2D";
						break;
					case 1:
						//层数可用
						this.currentState = "state3D";
						break;
				}
			}
			
			protected function dateTime_changeHandler():void
			{
				getLayerDate();
			}
		]]>
	</fx:Script>
	<Products:states>
		<s:State name="state2D" />
		<s:State name="state3D" />
	</Products:states>
	<s:BorderContainer id="bc_param"
					   top="45" width="230" left="10" 
					   height.state2D="45"
					   height.state3D="75"
					   styleName="BorderContainer" >
		
		<s:HGroup x="10" y="10" verticalAlign="middle">
			<s:Label text="再分析时间:" />
			<mx:DateField id="dateField" formatString="YYYY-MM-DD"
						  selectedDate="{new Date(1999,0,1)}" yearNavigationEnabled="true"
						  editable="false"  fontSize="13"
						  disabledRanges="{[{rangeEnd: new Date(1998,11,31)}, {rangeStart: new Date(2009,0,1)} ]}"
						  change="dateTime_changeHandler()"
						  />	
		</s:HGroup>
		<s:HGroup x="10" y="45" verticalAlign="middle" visible.state2D="false">
			<s:Label id="lb_prodLevel" text="深度层(m):"/>
			<s:DropDownList id="ddl_prodLevel" width="100" 
							selectedIndex="0"
							dataProvider="{new ArrayCollection(['2.5','10','20','30','50','75','100','125','150',
							'200','250','300','350','400','450','500','600','700',
							'800','900','1000','1100','1200','1300','1400','1500','1750',
							'2000','2500','3000','3500','4000','4500','5000','5500'])}" />
		</s:HGroup>
	</s:BorderContainer>
	<mx:Accordion id="accordion"
				  styleName="AccordionClass"
				  top.state2D="95" 
				  top.state3D="125" 
				  width="230" left="10" height="100%"
				  openDuration="400" change="accordion_changeHandler(event)" >
		<s:NavigatorContent label="再分析表面场产品查询" styleName="NavigatorContentClass" >
			<s:VGroup height="100%" width="100%">
				<s:Spacer height="1" />
				<mx:LinkButton label="海面高度(m)" toolTip="点击加载海面高度" click="getNumPredLayer('el')"/>
				<s:Spacer height="1" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent label="再分析深度场产品查询" styleName="NavigatorContentClass" >
			<s:VGroup height="100%" width="100%">
				<s:Spacer height="1" />
				<mx:LinkButton label="温度(℃)" toolTip="点击加载温度" click="getNumPredLayer('temp')"/>
				<mx:LinkButton label="盐度(psu)" toolTip="点击加载盐度" click="getNumPredLayer('salt')"/>
				<mx:LinkButton label="声速(m/s)" toolTip="点击加载声速" click="getNumPredLayer('soundspeed')"/>
				<mx:LinkButton label="密度(kg/m^3)" toolTip="点击加载盐度" click="getNumPredLayer('density')"/>
				<mx:LinkButton label="海流" toolTip="点击加载海流" click="getNumPredLayer('uv')"/>
				<s:Spacer height="1" />
			</s:VGroup>
		</s:NavigatorContent>
	</mx:Accordion>
</Products:ProductBase>
