<?xml version="1.0" encoding="utf-8"?>
<Products:ProductBase
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:Products="widgets.Products.*"
	creationComplete="creationCompleteHandler(event)"
	itemTitle="表层环流">
	<fx:Declarations>
		<s:SolidColorStroke id="stroke" color="0x7b7b7b" weight="1" />
		<s:Fade id="fadeAdd"  alphaFrom="0" alphaTo="1" duration="500" repeatCount="1" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.events.ZoomEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.symbols.PictureFillSymbol;
			import com.esri.viewer.AppEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.effects.Zoom;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.events.IndexChangeEvent;
			
			import widgets.Products.ProductsWidgetXml;
			
			[Bindable]
			public var map:Map;
			
			[Bindable]
			private var productDateArray:ArrayCollection = new ArrayCollection(["暂无数据"]);
			
			private var layerMaxMinDict:Dictionary = new Dictionary();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.map = ProductsWidgetXml.map;
			}
			public override function closeProductFunction():void
			{
				removeExistLayers();
			}
			public override function openProductFunctionEveryTime():void
			{
				accordion_changeHandler(null);
			}
			public override function openProductFunctionOnce():void
			{
				getLayerDate();
			}
			
			//读取时间文件，获取图层的时间和填色图的最大最小值
			protected function getLayerDate():void
			{
				var httpService:HTTPService = new HTTPService();
				httpService = new HTTPService();
				httpService.resultFormat = HTTPService.RESULT_FORMAT_E4X;
				httpService.addEventListener(ResultEvent.RESULT, getLayerDate_resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, getLayerDate_faultHandler);
				httpService.url = "http://" + ProductsWidgetXml.serverIP + "/img_nio/AnlysDgnst/SurfCur.xml?"+Math.random();
				httpService.send();
			}
			
			protected function getLayerDate_resultHandler(event:ResultEvent):void
			{
				var result:XML = event.result as XML;
				productDateArray = new ArrayCollection(["1","2","3","4","5","6","7","8","9","10","11","12"]);
				ddl_prodHour.selectedIndex = 0;
				//读取最大最小值
				for each(var node:XML in result.children())
				{
					layerMaxMinDict[node.name()]={"Max":node.@Max,"Min":node.@Min};
				}
				ddl_prodHour.selectedIndex = 0;
			}
			
			
			protected function getLayerDate_faultHandler(event:FaultEvent):void
			{
			}
			
			protected function getNumPredLayer(prod:String):void
			{
				if(productDateArray[0] == "暂无数据")
				{
					Alert.show("数据未入库，请等候","暂无数据", 4, null, null,errorLogo);
					return;
				}
				
				removeExistLayers();
				
				var layerName:String = "SurfCur-"+prod+"-"+ddl_prodHour.selectedItem;
				getLayer(layerName);
			}
			//获取要加载的图层，主要是一些需要做特殊处理的图层
			protected function getLayer(layerName:String):void
			{
				loadLayer(layerName);
			}
			//加载图层
			protected function loadLayer(layerName:String):void
			{
				//用Loader可以监听图层加载完毕事件，以设置图层加载的进度显示
				var pictureLoader:Loader = new Loader();
				pictureLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(event:Event):void{Alert.show("数据未入库","提示", 4, null, null,ProductBase.errorLogo);});
				pictureLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (event:Event):void{
					//添加polygonlayer，设置PictureFillSymbol
					var graphicsLayer:GraphicsLayer = new GraphicsLayer();
					graphicsLayer.id="NumericalLayer_"+layerName;
					graphicsLayer.name="Numerical Layer_"+layerName;
					//设置图层信息,产品类型，产品层数类型标志
					graphicsLayer.document = layerInfo;
					//graphicsLayer.alpha = layerName.indexOf("Contour")==-1?1:0.5;
					var graphic:Graphic = new Graphic();
					var polygon:Polygon  = new Polygon();
					polygon.spatialReference = map.spatialReference;
					var ring:Array = new Array();
					//坐标范围
					ring.push(new MapPoint(4508439,3567983));
					ring.push(new MapPoint(4508439,-613199));
					ring.push(new MapPoint(11187609,-613199));
					ring.push(new MapPoint(11187609,3567983));
					ring.push(new MapPoint(4508439,3567983));
					polygon.addRing(ring);
					graphic.geometry = polygon;
					var fillSymbol:PictureFillSymbol = new PictureFillSymbol(event.currentTarget.url,251,251,1,1,0,0,0.001,null);//"Embed(source='assets/images/about.png')"
					graphic.symbol = fillSymbol;
					graphicsLayer.add(graphic);
					graphicsLayer.addEventListener(LayerEvent.UPDATE_END,afterLayerLoaded);//添加图层加载完毕的事件监听
					map.addLayer(graphicsLayer);
					reorderMapLayer();//重新组织图层的顺序
					var zoomEvent:ZoomEvent = new ZoomEvent(ZoomEvent.ZOOM_START);
					map.dispatchEvent(zoomEvent);//获取该地图缩放级别的图层
				});
				//"http://localhost/img/20121217/Wind-Q2-0-2012112520.png"
				//"http://localhost/img/20121217/Wind-PSFC-0-2012112508-L4.png"
				var layerInfo:ArrayCollection = getLayerInfo(layerName);
				var url:String = "http://" 
					+ ProductsWidgetXml.serverIP + "/img_nio/AnlysDgnst/SurfCur/"
					+layerName+layerInfo.getItemAt(3)
					+".png";
				pictureLoader.load(new URLRequest(url));
				AppEvent.dispatch(AppEvent.LOADING,true);
			}
			//获取图层的信息
			//Wind-Q2-0-2013010708
			//Wind-QVAPOR-0-0-2013010708
			//Wind-SSWContour-0-0-2013010708
			protected function getLayerInfo(layerName:String):ArrayCollection
			{
				var layerInfo:ArrayCollection = new ArrayCollection();
				var array:Array = layerName.split('-');
				layerInfo.addItem(array[1]);//0、Q2，色标拉伸中用到
				layerInfo.addItem(array[0]);//1、Wind
				layerInfo.addItem(array[array.length-1]);//2、2013010708
				layerInfo.addItem(productLevelType(array[1]));//3、""或者"-L4"//-L4为多层数据，""为单层数据，在放大缩小时用到
				var maxmin:Object = layerMaxMinDict[layerName];
				layerInfo.addItem(maxmin==null?"":maxmin.Max);//4、最大值，色标拉伸中用到
				layerInfo.addItem(maxmin==null?"":maxmin.Min);//5、最小值，色标拉伸中用到
				return layerInfo;
			}
			
			//获取图层类型，""或者"-L4"//-L4为多层数据，""为单层数据
			protected function productLevelType(product:String):String
			{
				switch(product)
				{
					case "zonalcurmeridcur":
						return "-L4";
						break;
					default:
						return "";
				}
			}
			//图层加载完毕的工作
			private function afterLayerLoaded(evt:LayerEvent):void
			{
				if(evt.layer != null )
				{
					//隐藏关闭动画
					AppEvent.dispatch(AppEvent.LOADING,false);
					
					var layer:GraphicsLayer = evt.layer as GraphicsLayer
					
					//fadeAdd.alphaTo = 0.5;
					fadeAdd.target = layer;
					fadeAdd.end();
					fadeAdd.play();// 显示动画
					
					//删除事件监听
					if(layer.hasEventListener(LayerEvent.UPDATE_END))
					{
						layer.removeEventListener(LayerEvent.UPDATE_END,afterLayerLoaded);
					}
					//缩放到图层
					map.extent = (((layer.graphicProvider as ArrayCollection).getItemAt(0) as Graphic).geometry as Polygon).extent;	
				}
			}
			
			//移除所有数值预报图层，若一边找图层一边删除，会出现删不干净的bug，所以先将所有的待删除的图层放在列表中，一起删除
			public function removeExistLayers():void
			{
				var layerList:Array = new Array();
				for each(var layer:Layer in map.layers)
				{
					if((layer is GraphicsLayer && layer.id.indexOf("Numerical")!=-1))
					{
						layerList.push(layer);
					}
				}
				for each(var layer:Layer in layerList)
				{
					map.removeLayer(layer);
				}
			}
			
			//重新组织图层的顺序
			protected function reorderMapLayer():void
			{
			}
			
			protected function accordion_changeHandler(event:IndexChangedEvent):void
			{
			}
		]]>
	</fx:Script>
	<s:BorderContainer id="bc_param"
					   top="45" width="230" left="10" 
					   height="35"
					   styleName="BorderContainer" >
		<s:Label  x="10" y="10" text="月份:"/>
		<s:DropDownList id="ddl_prodHour" x="50" y="5" width="100" 
						dataProvider="{productDateArray}"
						selectedIndex="0"/>
	</s:BorderContainer>
	<mx:Accordion id="accordion"
				  styleName="AccordionClass"
				  top="85" 
				  width="230" left="10" height="100%"
				  openDuration="400" change="accordion_changeHandler(event)" >
		<s:NavigatorContent label="表层环流产品查询" styleName="NavigatorContentClass" >
			<s:VGroup height="100%" width="100%">
				<s:Spacer height="1" />
				<mx:LinkButton label="气候态表层环流分布(m)" toolTip="点击加载气候态表层环流分布" click="getNumPredLayer('zonalcurmeridcur')"/>
				<mx:LinkButton label="网络样本个数(个)" toolTip="点击加载1979-2010年北印度洋漂流浮标流速资料样本密度" click="getNumPredLayer('samplenum')"/>
				<s:Spacer height="1" />
			</s:VGroup>
		</s:NavigatorContent>
	</mx:Accordion>
</Products:ProductBase>